import React from 'react';
import { renderToString } from 'react-dom/server';
import { StaticRouter } from 'react-router';
import { matchRoutes, renderRoutes } from 'react-router-config';
import { Provider } from 'react-redux';
import { setUser, setCommunity } from 'modules/auth/auth.actions';
import routes from 'modules/_app/web/routes';
import configureStore from 'core/web/configureStore';
import path from 'path';

import { ChunkExtractor, ChunkExtractorManager } from '@loadable/server';

const { NODE_ENV } = process.env;

const statsFile = path.resolve('app/public/dist/loadable-stats.json');

// This is the stats file generated by webpack loadable plugin
// We create an extractor from the statsFile
let extractor = new ChunkExtractor({ statsFile, entrypoints: 'app' });

function fetchMeta(initialState) {
  let title;
  let description;
  let image;
  let url;

  const { community } = initialState.auth;
  if (initialState.posts.posts) {
    const postId = Object.keys(initialState.posts.posts)[0];
    if (postId) {
      let post = initialState.posts.posts[postId];
      if (post.metaPost) {
        post = initialState.posts.links[post.metaPost] || {};
      }
      title = post.title;
      image = post.image;
      description = post.body;
      url = `https://relevant.community/${community}/post/${postId}`;
    }
  }
  title = title || 'Relevant: A Social News Reader';
  image = image || 'https://relevant.community/img/fbimg.png';
  url = url || 'https://relevant.community/';
  description =
    description ||
    'Relevant is a social news reader that values quality over clicks. Our mission is to create a token-backed qualitative metric for the information economy â€” making the human values of veracity, expertise and agency economically valuable.';
  return { title, description, image, url };
}

function renderFullPage(html, initialState) {
  let styleTags;


  // load extracted styles in head when in production
  if (NODE_ENV === 'development') {
    styleTags = '';
    extractor = new ChunkExtractor({ statsFile, entrypoints: 'app' });
  } else styleTags = extractor.getStyleTags();

  const meta = fetchMeta(initialState);

  const scriptTags = extractor.getScriptTags();

  const app = `<!doctype html>
    <html>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

        <title>Relevant: A Social News Reader</title>
        <link rel="icon" href="https://relevant.community/favicon.ico?v=2" />
        <meta name="description" content="${meta.description}" />
        <meta property="og:description" content="${meta.description}" />
        <meta property="og:title" content="${meta.title}" />
        <meta property="og:url" content="${meta.url}" />
        <meta property="og:image" content="${meta.image}" />

        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:site" content="@4realglobal" />
        <meta name="twitter:title" content="${meta.title}" />
        <meta name="twitter:description" content="${meta.description}" />
        <meta name="twitter:image" content="${meta.image}" />

        ${styleTags}

        <!-- Global site tag (gtag.js) - Google Analytics -->
        <script async src="https://www.googletagmanager.com/gtag/js?id=UA-51795165-6"></script>
        <script>
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());

          gtag('config', 'UA-51795165-6');
        </script>

        <!-- Facebook Pixel Code -->
        <script>
        !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?
        n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;
        n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;
        t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,
        document,'script','https://connect.facebook.net/en_US/fbevents.js');
        fbq('init', '286620198458049', {
        em: 'insert_email_variable'
        });
        fbq('track', 'PageView');
        </script>
        <noscript><img height="1" width="1" style="display:none"
        src="https://www.facebook.com/tr?id=286620198458049&ev=PageView&noscript=1"
        /></noscript>
        <!-- DO NOT MODIFY -->
        <!-- End Facebook Pixel Code -->
      </head>
      <body>
        <div id="app">${html}</div>
        <script>
          window.__INITIAL_STATE__ = ${JSON.stringify(initialState)}
        </script>

        ${scriptTags}
      </body>
    </html>
  `;

  return app;
}

// Might be useful to go through the whole stack?
// function fetchComponentData(dispatch, components, params, req) {
//   const promises = components
//   .filter(component => component && component.fetchData)
//   .map(component => component.fetchData)
//   .map(fetchData => fetchData(dispatch, params, req));
//   return Promise.all(promises);
// }

export default function handleRender(req, res) {
  const auth = {};
  if (req.unconfirmed) auth.confirmed = false;

  // TODO how to deal with this better?
  auth.community = 'relevant';
  const initialState = { auth };

  // Create a new Redux store instance
  const store = configureStore(initialState);

  // TODO check this! better to use 'default user community'
  // or most recent community
  store.dispatch(setCommunity(auth.community));

  if (req.user) store.dispatch(setUser(req.user));


  const branch = matchRoutes(routes, req.url);
  const promises = branch.map(async ({ route, match }) => {
    const { params } = match;
    const { fetchData } = route.component;
    // TODO can you get away without sending params and send whole store?
    return fetchData instanceof Function ?
      fetchData(store.dispatch, params) : Promise.resolve(null);
  });

  return Promise.all(promises).then(() => {
    const context = {};
    const content = renderToString(
      <ChunkExtractorManager extractor={extractor}>
        <Provider store={store}>
          <div className="parent">
            <StaticRouter location={req.url} context={context}>
              {renderRoutes(routes)}
            </StaticRouter>
          </div>
        </Provider>
      </ChunkExtractorManager>
    );
    res.send(renderFullPage(content, store.getState()));
  })
  .catch(err => {
    console.log('RENDER ERROR', err); // eslint-disable-line
    res.send(renderFullPage('', store.getState()));
  });
}
