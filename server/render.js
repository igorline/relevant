import React from 'react';
import { renderToString, renderToStaticMarkup } from 'react-dom/server';
import { StaticRouter } from 'react-router';
import { matchRoutes, renderRoutes } from 'react-router-config';
import { compose } from 'redux';
import { Provider } from 'react-redux';
import { setUser, setCommunity } from 'modules/auth/auth.actions';
import routes from 'modules/_app/web/routes';
import configureStore from 'core/web/configureStore';
import { ServerStyleSheet, StyleSheetManager } from 'styled-components';
import path from 'path';
import { AppRegistry } from 'react-native-web';
import useragent from 'express-useragent';

import { ChunkExtractor, ChunkExtractorManager } from '@loadable/server';

const { NODE_ENV } = process.env;
const sheet = new ServerStyleSheet();

const statsFileName =
  NODE_ENV !== 'development' ? 'loadable-stats' : 'loadable-stats-dev';
const statsFile = path.resolve(`app/public/dist/${statsFileName}.json`);

// This is the stats file generated by webpack loadable plugin
// We create an extractor from the statsFile
let extractor =
  NODE_ENV !== 'development'
    ? new ChunkExtractor({ statsFile, entrypoints: 'app' })
    : null;

export function createInitialState(req) {
  const cachedCommunity = req.user ? req.user.community : null;
  return {
    auth: {
      confirmed: req.confirmed || (req.user && req.user.confirmed),
      // TODO - get this from req.user
      community: req.params.community || cachedCommunity
    }
  };
}

export const initStore = compose(
  configureStore,
  createInitialState
);

export default async function handleRender(req, res) {
  const store = initStore(req);
  global.userAgent = useragent.parse(req.headers['user-agent']);
  // TODO - get rid of this - need to convert util/api to middleware
  // and populate user store with req.user
  if (req.user) store.dispatch(setUser(req.user));
  store.dispatch(setCommunity(store.getState().auth.community));
  const fullUrl = req.protocol + '://' + req.get('host') + req.originalUrl;

  try {
    await handleRouteData({ req, store });
    const { app, rnWebStyles } = renderApp({ url: req.url, store });

    const html = renderFullPage({
      app,
      fullUrl,
      rnWebStyles,
      initialState: store.getState()
    });
    res.send(html);
  } catch (err) {
    console.log('RENDER ERROR', err); // eslint-disable-line
    res.send(renderFullPage({ initialState: store.getState(), fullUrl }));
  }
}

export function renderFullPage({ app, rnWebStyles, initialState, fullUrl }) {
  let cssStyleTags = '';
  let styledComponentsTags = '';

  // load extracted styles in head when in production
  if (NODE_ENV === 'development') {
    extractor = new ChunkExtractor({ statsFile, entrypoints: 'app' });
  } else {
    styledComponentsTags = sheet.getStyleTags();
    cssStyleTags = extractor.getStyleTags();
  }
  const meta = fetchMeta(initialState);

  const scriptTags = extractor.getScriptTags();

  return `<!doctype html>
    <html>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

        <title>Relevant: Curated by Communities, Not Clicks</title>
        <link rel="icon" href="https://relevant.community/favicon.ico?v=2" />
        <meta name="description" content="${meta.description}" />
        <meta property="og:description" content="${meta.description}" />
        <meta property="og:title" content="${meta.title}" />
        <meta property="og:url" content="${meta.url}" />
        <meta property="og:image" content="${meta.image}" />

        <meta name="twitter:card" content="${meta.type}" />
        <meta name="twitter:site" content="@relevantfeed" />
        <meta name="twitter:title" content="${meta.title}" />
        <meta name="twitter:description" content="${meta.description}" />
        ${meta.image ? `<meta name="twitter:image" content="${meta.image}" />` : ''}

        <meta name="apple-itunes-app" content="app-id=1173025051 app-argument=${fullUrl}">

        <meta name="google-play-app" content="app-id=com.relevantnative">
        <link rel="apple-touch-icon" href="/img/RoundedIcon.png">
        <link rel="android-touch-icon" href="/img/RoundedIcon.png">

        ${rnWebStyles}
        ${cssStyleTags}
        ${styledComponentsTags}

        <!-- Facebook Pixel Code -->
        <script>
        !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?
        n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;
        n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;
        t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,
        document,'script','https://connect.facebook.net/en_US/fbevents.js');
        fbq('init', '286620198458049');
        fbq('track', 'PageView');
        </script>
        <noscript><img height="1" width="1" style="display:none"
        src="https://www.facebook.com/tr?id=286620198458049&ev=PageView&noscript=1"
        /></noscript>
        <!-- DO NOT MODIFY -->
        <!-- End Facebook Pixel Code -->
      </head>
      <body>
        <div id="app">${app}</div>
        <script>window.__INITIAL_STATE__ = ${JSON.stringify(initialState)}</script>
        ${scriptTags}
      </body>
    </html>
  `;
}

export function fetchMeta(initialState) {
  let title;
  let description;
  let image;
  let url;
  let post;

  let type = 'summary_large_image';

  const { community } = initialState.auth;

  if (initialState.posts.posts) {
    const postId = Object.keys(initialState.posts.posts)[0];
    post = postId ? initialState.posts.posts[postId] : null;
    if (post) {
      if (post.metaPost) {
        post = initialState.posts.links[post.metaPost] || post;
      }
      title = post.title;
      image = post.image;
      description = post.body;
      url = `https://relevant.community/${community}/post/${postId}`;
      if (!image) type = 'summary';
    }
  }

  title = title || 'Relevant: Curated by Communities, Not Clicks.';
  image = post
    ? post.image || 'https://relevant.community/img/r-big.png'
    : 'https://relevant.community/img/fbImage.png';
  url = url || 'https://relevant.community/';
  description = description || 'Join the discussion.';
  return { title, description, image, url, type };
}

export async function handleRouteData({ req, store }) {
  const branch = matchRoutes(routes, req.url);
  const promises = branch.map(async ({ route, match }) => {
    const { params } = match;
    const { fetchData } = route.component;
    // TODO can you get away without sending params and send whole store?
    return fetchData instanceof Function
      ? fetchData(store.dispatch, params)
      : Promise.resolve(null);
  });
  return Promise.all(promises);
}

export function renderApp({ url, store }) {
  const context = {};

  const App = () => (
    <Provider store={store}>
      <StaticRouter location={url} context={context}>
        {renderRoutes(routes)}
      </StaticRouter>
    </Provider>
  );

  AppRegistry.registerComponent('App', () => App);
  const { getStyleElement } = AppRegistry.getApplication('App', store.getState());
  const rnWebStyles = renderToStaticMarkup(getStyleElement());

  const app = renderToString(
    <StyleSheetManager sheet={sheet.instance}>
      <ChunkExtractorManager extractor={extractor}>{App()}</ChunkExtractorManager>
    </StyleSheetManager>
  );
  return { app, rnWebStyles };
}
